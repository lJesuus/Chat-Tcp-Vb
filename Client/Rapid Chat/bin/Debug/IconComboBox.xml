<?xml version="1.0"?>
<doc>
<assembly>
<name>
IconComboBox
</name>
</assembly>
<members>
<member name="P:CustomControls.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:CustomControls.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:CustomControls.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="T:CustomControls.IconComboBox.IconComboItemCollectionChangeType">
	<summary>
 Enumeration to indicate how the IconComboItemCollection gets changed
 for various operations
 </summary>
	<remarks>Only used internally by IconComboBox</remarks>
</member><member name="P:CustomControls.IconComboBox.ToolTipText">
	<summary>
 Get or set the tooltip text to be shown in the tooltip over the
 combobox.
 </summary>
	<value>The new string to display in the tooltip.</value>
	<returns>The string currently being displayed in the tooltip.</returns>
	<remarks>This string defaults to the Data.ToString value when an item
 in the ComboBox is selected.</remarks>
</member><member name="P:CustomControls.IconComboBox.Items">
	<summary>
 The collection of IconComboItems used to render the ComboBox.
 </summary>
	<returns>The collection of IconComboItems used to render the ComboBox.</returns>
	<remarks>This property provides a similar interface to the .NET ComboBox, 
 needing to call ComboBox1.Items.Add("MyStr") to add an item.</remarks>
</member><member name="P:CustomControls.IconComboBox.SelectedItem">
	<summary>
 Gets the IconComboItem object for the currently selected item in the dropdown.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.#ctor">
	<summary>
 Creates a new instance of the IconComboBox.
 </summary>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
	<summary>
 Draws an IconComboBox item into the ComboBox in the area specified by the DrawItemEventArgs.
 </summary>
	<param name="e">Event argument specifying which item to draw and where to draw it.</param>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.AddDivider">
	<summary>
 Add a divider line to the ComboBox.  The line will be appended to the end of the list.
 </summary>
	<returns>The index of the added divider.</returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItem.ItemImage">
	<summary>
 The image to be displayed next to the text for this combo box item.
 </summary>
	<value>The icon to be displayed</value>
	<returns>The icon currently being displayed</returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItem.Data">
	<summary>
 The string representing data you want associated with this IconComboItem.
 </summary>
	<value>The data to be set</value>
	<returns>The data currently saved</returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItem.DisplayText">
	<summary>
 What to display for this item.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItem.IsDivider">
	<summary>
 Indicates whether this IconComboItem is a divider.
 </summary>
	<value>Boolean indicating if this item is a divider or not.  This property can only be SET
 by the IconComboBox.</value>
	<returns>True if this is a divider; False if it is not.</returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItem.#ctor(System.String,System.String)">
	<summary>
 Create a new IconComboItem with the specified values
 </summary>
	<param name="argText">The text to display in the combo box</param>
	<param name="argData">The string representing this IconComboItem's data</param>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItem.Equals(CustomControls.IconComboBox.IconComboItem)">
	<summary>
 Returns if this IconComboItem is equal to the specified one.
 </summary>
	<param name="other">The IconComboItem to compare</param>
	<returns>True if this item's Data property equals the other item's Data property.</returns>
	<remarks></remarks>
</member><member name="T:CustomControls.IconComboBox.IconComboItem">
	<summary>
 Object representing an entry in the IconComboBox.
 </summary>
	<remarks>Implements IEquatable for searching and sorting the IconComboItemCollection.</remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItemCollection.Count">
	<summary>
 The number of items in the current collection
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItemCollection.Item(System.Int32)">
	<summary>
 Gets the IconComboItem at the specfied index
 </summary>
	<param name="index">The index of the IconComboItem to return</param>
	<value></value>
	<returns>The IconComboItem at the specified index, or nothing if the index is out of range.</returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItemCollection.Add(CustomControls.IconComboBox.IconComboItem)">
	<summary>
 Add the specified IconComboItem to the end of the collection.
 </summary>
	<param name="argItem">The IconComboItem to add.  Can be Null.</param>
	<returns>The zero-based index where the IconComboItem was added.</returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItemCollection.Insert(System.Int32,CustomControls.IconComboBox.IconComboItem)">
	<summary>
 Insert the specified IconComboItem at the specified index.
 </summary>
	<param name="idx"></param>
	<param name="argItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItemCollection.Clear">
	<summary>
 Clear all the items from this collection and from the combo box.
 </summary>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItemCollection.Contains(CustomControls.IconComboBox.IconComboItem)">
	<summary>
 Determine if the collection contains the specified IconComboItem, using the 
 <see>IconComboItem.Equals</see> method for comparison.
 </summary>
	<param name="item"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItemCollection.IndexOf(CustomControls.IconComboBox.IconComboItem)">
	<summary>
 Searches for the specified IconComboItem and returns the zero-based index of the first 
 occurrence within the entire IconComboItemCollection.
 </summary>
	<param name="item">The object to locate in the IconComboItemCollection. 
 The value can be null for reference types.</param>
	<returns>The zero-based index of the first occurrence of item within 
 the entire IconComboItemCollection, if found; otherwise, –1.</returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItemCollectionChangedEventArgs.ChangeType">
	<summary>
 Indicates how the IconComboItemCollection was changed - add, delete, remove, or clear.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItemCollectionChangedEventArgs.ChangedItem">
	<summary>
 The item that was changed resulting in this event.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:CustomControls.IconComboBox.IconComboItemCollectionChangedEventArgs.ChangedIndex">
	<summary>
 The index of the changed item in the IconComboItemCollection.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:CustomControls.IconComboBox.IconComboItemCollectionChangedEventArgs.#ctor(System.Int32,CustomControls.IconComboBox.IconComboItemCollectionChangeType,CustomControls.IconComboBox.IconComboItem)">
	<summary>
 Create a new instance of these event args with the specified arguments
 </summary>
	<param name="argidx">Index of the changed item</param>
	<param name="argType">How the item was changed. <seealso>IconComboBox.IconComboItemCollectionChangeType</seealso></param>
	<param name="argItem">The <see>IconComboItem</see> that was changed</param>
	<remarks></remarks>
</member><member name="T:CustomControls.IconComboBox.IconComboItemCollectionChangedEventArgs">
	<summary>
 These args are used in events indicating that the IconComboItemCollection has been
 changed.  This class can only be used by the IconComboBox.
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>